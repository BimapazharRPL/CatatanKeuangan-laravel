<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('laporan', function (Blueprint $table) {
            $table->id();
            $table->string('keterangan');
            $table->date('tanggal');
            $table->unsignedBigInteger('pengeluaran_id');
            $table->foreign('pengeluaran_id')->references('id')->on('pengeluaran');
            $table->unsignedBigInteger('pemasukan_id');
            $table->foreign('pemasukan_id')->references('id')->on('pemasukan');
            $table->unsignedBigInteger('piutang_id');
            $table->foreign('piutang_id')->references('id')->on('piutang');
            $table->unsignedBigInteger('asset_id');
            $table->foreign('asset_id')->references('id')->on('asset');
            $table->unsignedBigInteger('dana_darurat_id');
            $table->foreign('dana_darurat_id')->references('id')->on('dana_darurat');
            $table->unsignedBigInteger('rencana_budget_id');
            $table->foreign('rencana_budget_id')->references('id')->on('rencana_budget');
            $table->unsignedBigInteger('hutang_id');
            $table->foreign('hutang_id')->references('id')->on('hutang');
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('laporan');
    }
};

@if(count($hutangHariIni) > 0)
        <table class="data-table">
            <thead>
                <tr>
                    <th>Nama</th>
                    <th>Jumlah</th>
                    <th>Catatan</th>
                    <th>Tanggal Hutang</th>
                    <th>Tanggal Jatuh Tempo</th>
                </tr>
            </thead>
            <tbody>
                @foreach($hutangHariIni as $hutang)
                    <tr>
                        <td>{{ $hutang->nama }}</td>
                        <td>{{ $hutang->jumlah }}</td>
                        <td>{{ $hutang->catatan }}</td>
                        <td>{{ $hutang->tgl_hutang }}</td>
                        <td>{{ $hutang->tgl_jthtempo }}</td>
                    </tr>
                @endforeach
            </tbody>
        </table>
    @else
        <p>Tidak ada Hutang yang jatuh tempo hari ini.</p>
    @endif

    Route::get('laporan', [LaporanController::class, 'laporanHariIni']);

    $hari1 = date("Y-m-d");
$hutangHariIni = []; // Array untuk menyimpan nama Hutang

foreach ($data3 as $waktu) {
    if ($hari1 === $waktu->tgl_jthtempo) {
        // Jika tanggal hari ini sama dengan tanggal jatuh tempo
        // Simpan nama Hutang ke dalam array
        $hutangHariIni[] = $waktu->nama;
    }
}

// Output array Hutang yang jatuh tempo hari ini
return view('laporan', ['hutangHariIni' => $hutangHariIni]);

@if (!empty($hutangHariInI))
@foreach ($hutangHariInI as $hutangX)
    <tr> 
        <td>{{ $hutangX['nama'] }}</td>
        <td>{{ $hutangX['jumlah'] }}</td>
    </tr>
@endforeach
@else
<tr>
    <td>Tidak ada</td>
    <td>Tidak ada</td>
</tr>
@endif

// public/js/modul.js

   document.addEventListener('DOMContentLoaded', function () {
    // Get the modal element
    var modul = document.getElementById('myModul');

    // Get the button that opens the modal
    var btn = document.getElementById('showModulButton');

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName('close')[0];

    // When the user clicks the button, open the modal
    btn.onclick = function () {
        modul.style.display = 'block';
    };

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modul.style.display = 'none';
    };

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modul) {
            modul.style.display = 'none';
        }
    };

    
});
</script>


<div id="myModal" class="modal">
    <div class="modal-content">
        <span class="close">&times;</span>
        <p>Keterangan Anda di sini.</p>
    </div>
</div>
<div id="myModul" class="modul">
    <div class="modul-content">
        <span class="close">&times;</span>
        <form action="{{ route('auth.logout') }}" method="POST">
            @csrf
            <button type="submit" class="nav-link btn btn-warning">Logout</button>
          </form>
    </div>
</div>
    .modal                                                                                                                                                                                                                                .modal {
        display: none;
        position: fixed;
        height: 18rem;
        width: 13rem;
        top: 17%;
        left: 87%;
        transform: translate(-50%, -50%);
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
        border-radius: 10px;
        z-index:999999999 ;
    }
    .modul {
        display: none;
        position: fixed;
        height: 18rem;
        width: 13rem;
        top: 17%;
        left: 87%;
        transform: translate(-50%, -50%);
        padding: 20px;
        background-color: #fff;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.8);
        border-radius: 10px;
        z-index:999999999 ;
    }                                                                                                                                                                                                              <script>
    // public/js/modal.js

    document.addEventListener('DOMContentLoaded', function () {
    // Get the modal element
    var modal = document.getElementById('myModal');

    // Get the button that opens the modal
    var btn = document.getElementById('showModalButton');

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName('close')[0];

    // When the user clicks the button, open the modal
    btn.onclick = function () {
        modal.style.display = 'block';
    };

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = 'none';
    };

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal) {
            modal.style.display = 'none';
        }
    };
});
</script>
<script>

   // public/js/modul.js

   document.addEventListener('DOMContentLoaded', function () {
    // Get the modal element
    var modul = document.getElementById('myModul');

    // Get the button that opens the modal
    var btn1 = document.getElementById('showModulButton');

    // Get the <span> element that closes the modal
    var span1 = document.getElementsByClassName('close')[0];

    // When the user clicks the button, open the modal
    btn1.onclick = function () {
        modul.style.display = 'block';
    };

    // When the user clicks on <span> (x), close the modal
    span1.onclick = function () {
        modul.style.display = 'none';
    };

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modul) {
            modul.style.display = 'none';
        }
    };
});

</script>  

$XT = $hutangHariInI;
        return view('layouts.separete.header', compact('XT')); 

document.addEventListener('DOMContentLoaded', function () {
    // Get the modal element
    var modal = document.getElementById('myModal');
    var modul = document.getElementById('myModul');

    // Get the button that opens the modal
    var btn = document.getElementById('showModalButton');
    var btn1 = document.getElementById('showModulButton');

    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName('close')[0];

    // When the user clicks the button, open the modal
    btn.onclick = function () {
        modal.style.display = 'block';
    };

    btn1.onclick = function () {
        modul.style.display = 'block';
    };

    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = 'none';
        modul.style.display = 'none';
    };

    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function (event) {
        if (event.target == modal || event.target == modul) {
            modal.style.display = 'none';
            modul.style.display = 'none';
        }
    };
});

// New function to close the modul
window.closeModul = function () {
    var modul = document.getElementById('myModul');
    modul.style.display = 'none';
};

<div id="myModul" class="modul">
    <div class="modul-content">
        <span class="close" onclick="closeModul()">&times;</span>
        <p>Nama : {{ Auth::user()->name }}</p>
        <p>{{ Auth::user()->email }}</p>
        <form action="{{ route('auth.logout') }}" method="POST">
            @csrf
            <button type="submit" class="nav-link btn btn-warning">Logout</button>
        </form>
    </div>
</div>
<script>
document.addEventListener('DOMContentLoaded', function () {
    // Ambil total pengeluaran dan sisa dari PHP
    var totalPengeluaran = {{ $totalPengeluaran }};
    var sisa = {{ $sisa }};

    // Data untuk grafik Pie Chart
    var data = {
        labels: ['Pengeluaran', 'Sisa'],
        datasets: [{
            data: [totalPengeluaran, sisa],
            backgroundColor: ['#FF6384', '#FFCE56'],
        }]
    };

    // Konfigurasi untuk grafik
    var options = {
        responsive: true,
        maintainAspectRatio: false,
        legend: {
            display: false, // Menyembunyikan legend
        },
    };

    // Ambil elemen canvas
    var ctx = document.getElementById('pieChart').getContext('2d');

    // Buat grafik Pie Chart
    var myPieChart = new Chart(ctx, {
        type: 'pie',
        data: data,
        options: options,
    });
});
</script>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
    <canvas id="myChart1"></canvas><br>
    <canvas id="myChart2"></canvas> 
</body>
<script>
        //Pemasukan
        var ctx = document.getElementById('myChart1').getContext('2d');
        var pemasukanData = @json($pemasukanData);

        var myChart1 = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: pemasukanData.map(item => item.nama),
                datasets: [{
                    label: 'Grafik Pemasukan',
                    data: pemasukanData.map(item => item.jumlah),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1 
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        //Pengeluaran
        var ctx = document.getElementById('myChart2').getContext('2d');
        var pengeluaranData = @json($pengeluaranData);

        var myChart2 = new Chart(ctx, {
            type: 'bar',
            data: {
                labels: pengeluaranData.map(item => item.nama),
                datasets: [{
                    label: 'Grafik Pengeluaran',
                    data: pengeluaranData.map(item => item.jumlah),
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'aqua',
                    borderWidth: 1 
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var pengeluaranData = @json($pengeluaranData);
            var pemasukanData = @json($pemasukanData);

            var labels = Array.from({ length: 12 }, (_, i) => (i + 1).toString());

            var data = {
                labels: labels,
                datasets: [
                    {
                        label: 'Pengeluaran',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        borderColor: 'rgb(255, 99, 132)',
                        borderWidth: 1,
                        data: pengeluaranData.map(item => item.total || 0),
                    },
                    {
                        label: 'Pemasukan',
                        backgroundColor: 'rgba(75, 192, 192, 0.5)',
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1,
                        data: pemasukanData.map(item => item.total || 0),
                    },
                ],
            };

            var options = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        beginAtZero: true,
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
            };

            var ctx = document.getElementById('barChart').getContext('2d');
            var myBarChart = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: options,
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var pengeluaranData = @json($pengeluaranData);
            var pemasukanData = @json($pemasukanData);

            // Menggunakan moment.js untuk mengubah angka bulan menjadi nama bulan
            var labels = moment.months();

            var data = {
                labels: labels,
                datasets: [
                    {
                        label: 'Pengeluaran',
                        backgroundColor: 'rgba(255, 99, 132, 0.5)',
                        borderColor: 'rgb(255, 99, 132)',
                        borderWidth: 1,
                        data: pengeluaranData.map(item => item.total || 0),
                    },
                    {
                        label: 'Pemasukan',
                        backgroundColor: 'rgba(75, 192, 192, 0.5)',
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1,
                        data: pemasukanData.map(item => item.total || 0),
                    },
                ],
            };

            var options = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        beginAtZero: true,
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
            };

            var ctx = document.getElementById('barChart').getContext('2d');
            var myBarChart = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: options,
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var pengeluaranData = @json($pengeluaranData);
            var pemasukanData = @json($pemasukanData);

            // Menggunakan moment.js untuk mengubah angka bulan menjadi nama bulan
            var labels = moment.months();

            var data = {
                labels: labels,
                datasets: [
                    {
                        label: 'Pengeluaran',
                        backgroundColor: '#F44336',
                        borderColor: 'rgb(255, 99, 132)',
                        borderWidth: 1,
                        data: pengeluaranData.map(item => item.total || 0),
                    },
                    {
                        label: 'Pemasukan',
                        backgroundColor: '#90A4AE ',
                        borderColor: 'rgb(75, 192, 192)',
                        borderWidth: 1,
                        data: pemasukanData.map(item => item.total || 0),
                    },
                ],
            };

            var options = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        beginAtZero: true,
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
            };

            var ctx = document.getElementById('barChart').getContext('2d');
            var myBarChart = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: options,
            });
        });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var pengeluaranData = @json($pengeluaranData);
            var pemasukanData = @json($pemasukanData);

            // Menggunakan moment.js untuk mengubah angka bulan menjadi nama bulan
            var labels = moment.months();
            var currentYear = moment().year();

            var datasets = [
                {
                    label: 'Pengeluaran',
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    borderColor: 'rgb(255, 99, 132)',
                    borderWidth: 1,
                    data: initializeDataArray(),
                },
                {
                    label: 'Pemasukan',
                    backgroundColor: 'rgba(75, 192, 192, 0.5)',
                    borderColor: 'rgb(75, 192, 192)',
                    borderWidth: 1,
                    data: initializeDataArray(),
                },
            ];

            // Mengisi array data berdasarkan data yang diterima dari server
            pengeluaranData.forEach(function (item) {
                var index = moment.months().indexOf(item.bulan);
                datasets[0].data[index] = item.total || 0;
            });

            pemasukanData.forEach(function (item) {
                var index = moment.months().indexOf(item.bulan);
                datasets[1].data[index] = item.total || 0;
            });

            function initializeDataArray() {
                return Array(labels.length).fill(0);
            }

            var data = {
                labels: labels,
                datasets: datasets,
            };

            var options = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        beginAtZero: true,
                    },
                    y: {
                        beginAtZero: true,
                    },
                },
            };

            var ctx = document.getElementById('barChart').getContext('2d');
            var myBarChart = new Chart(ctx, {
                type: 'bar',
                data: data,
                options: options,
            });

            function updateChart() {
                // Ambil tahun yang dipilih oleh pengguna
                var selectedYear = document.getElementById('year').value;

                // Lakukan permintaan AJAX atau sesuaikan sumber data sesuai dengan tahun yang dipilih
                // ...

                // Setelah mendapatkan data yang baru, perbarui dataset dan chart
                // ...

                // Contoh: Hanya memberi tahu bahwa Anda perlu memperbarui dataset dan memanggil update
                console.log('Update chart for year ' + selectedYear);
            }

            window.updateChart = updateChart;
        });

        
    </script>
     <form id="yearForm">
        <label for="year">Pilih Tahun: </label>
        <select id="year" name="year">
            <!-- Tambahkan opsi tahun, misalnya dari tahun 2021 hingga tahun sekarang -->
            @for ($i = date('Y'); $i >= 2021; $i--)
                <option value="{{ $i }}">{{ $i }}</option>
            @endfor
        </select>
        <button type="button" onclick="updateChart()">Ganti Tahun</button>
    </form>
        <canvas id="barChart"></canvas>

        <form action="{{ url('/bulan') }}" method="get">
        <label for="year">Pilih Tahun:</label>
        <select name="year" id="year" onchange="this.form.submit()">
            @for ($i = now()->year; $i >= 2020; $i--)
                <option value="{{ $i }}" {{ $selectedYear == $i ? 'selected' : '' }}>{{ $i }}</option>
            @endfor
        </select>
    </form>


    <?php
use App\Models\Pemasukan;
use App\Models\Pengeluaran;
use Carbon\Carbon;  

$pengeluaran = Pengeluaran::all();
$pemasukan = Pemasukan::all();

$combinedData = $pengeluaran->merge($pemasukan);
$groupedData = $combinedData->groupBy('tanggal');

$totals = [];
foreach ($groupedData as $tanggal => $data) {
    $totals[$tanggal]['total_pemasukan'] = $data->whereInstanceOf(Pemasukan::class)->sum('jumlah');
    $totals[$tanggal]['total_pengeluaran'] = $data->whereInstanceOf(Pengeluaran::class)->sum('jumlah');
    $totals[$tanggal]['hari'] = Carbon::parse($tanggal)->format('l'); // Mendapatkan hari dari tanggal
}


<table border="1">
        <thead>
            <tr>
                <th>Tanggal</th>
                <th>Data</th>
            </tr>
        </thead>
        <tbody>
            @foreach($groupedData as $tanggal => $data)
                <tr>
                    <td>{{ $tanggal }}</td>
                    <td>
                        <ul>
                            @foreach($data as $item)
                                <li>{{ $item->nama }} - {{ $item->jumlah }}</li>
                                <!-- Tambahkan detail data lainnya sesuai kebutuhan -->
                            @endforeach
                        </ul>
                    </td>
                </tr>
            @endforeach
        </tbody>
    </table>
<table class="data-table">
        <thead>
        @foreach($groupedData as $tanggal => $data)
                <tr>
                @foreach($totals as $tanggal => $data)
                <td>{{ $tanggal . ' ' . $data['hari'] }}</td>
                <td>{{ $data['total_pemasukan'] }}</td>
                <td>{{ $data['total_pengeluaran'] }}</td>
                @endforeach
            </tr>
            </thead>
            <tbody>
            @foreach($data as $item)
                <tr> 
                    <td>{{ $item->nama }}</td>
                    <td>{{ $item->katagori }}</td>
                    <td>{{ $item->jumlah }}</td>
                </tr>
                @endforeach
            </tbody>
            @endforeach


            public function exportPemasukanToExcel()
    {
        // Get data from the Pemasukan model
        $pemasukanData = Pemasukan::all();

        // Transform data as needed
        $data = [];
        foreach ($pemasukanData as $pemasukan) {
            $data[] = [
                'Nama' => $pemasukan->nama,
                'Jumlah' => $pemasukan->jumlah,
                'Catatan' => $pemasukan->catatan,
                'Tanggal' => $pemasukan->tanggal,
                'Kategori' => $pemasukan->katagori,
            ];
        }

        // Create a new Excel file
        Excel::create('pemasukan_data', function ($excel) use ($data) {
            // Set the title for the sheet
            $excel->setTitle('Pemasukan Data');

            // Add a new sheet with the data
            $excel->sheet('Sheet 1', function ($sheet) use ($data) {
                $sheet->fromArray($data, null, 'A1', false, false);
            });
        })->export('xlsx'); // Export as Excel file (xlsx format)
    }

    public function tespdf()
{
    $pemasukanData = Pemasukan::all();
    return response()->json($pemasukanData);
}



<script>
        document.addEventListener('DOMContentLoaded', function () {
            // Fungsi untuk membuat dan mengunduh PDF
            function generateAndDownloadPDF() {
                // Membuat instance dari jsPDF
                const doc = new jsPDF();

                // Mengambil HTML dari elemen dengan class "tabelprint"
                const element = document.querySelector('.tabelprint');

                // Menambahkan HTML ke dokumen PDF
                doc.html(element, {
                    callback: function (doc) {
                        // Mengunduh dokumen PDF dengan nama "data_pemasukan.pdf"
                        doc.save('data_pemasukan.pdf');
                    }
                });
            }

            // Mendengarkan klik pada tombol dan memanggil fungsi unduh PDF
            document.getElementById('downloadPdfButton').addEventListener('click', generateAndDownloadPDF);

            // Panggil fungsi unduh PDF otomatis saat halaman dimuat
            generateAndDownloadPDF();
        });
    </script>


     -->
<!-- <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Print otomatis ketika halaman dimuat
        window.print();

        // Mendeteksi ketika cetakan selesai atau dibatalkan
        window.onafterprint = function (event) {
            // Kembali ke halaman sebelumnya jika cetakan berhasil
            window.history.back();
        };
    });
</script>

 <script>
    document.addEventListener('DOMContentLoaded', function () {
        // Fungsi untuk memanggil window.print()
        function printDocument() {
            // Print otomatis ketika halaman dimuat
            window.print();
        }

        // Fungsi untuk mendeteksi selesai atau pembatalan pencetakan
        function afterPrint(event) {
            // Kembali ke halaman sebelumnya jika pencetakan berhasil
            window.history.back();
        }

        // Mendeteksi ketika pencetakan selesai atau dibatalkan
        if (window.matchMedia) {
            var mediaQueryList = window.matchMedia('print');
            mediaQueryList.addListener(function (mql) {
                if (!mql.matches) {
                    // Panggil fungsi setelah pencetakan selesai atau dibatalkan
                    afterPrint();
                }
            });
        }

        // Panggil fungsi print otomatis saat halaman dimuat
        printDocument();
    });
</script>
<script>
     var ctx = document.getElementById('myChart').getContext('2d');

var myChart = new Chart(ctx, {
    type: 'bar',
    data: {
        labels: {!! $monthlyDataPengeluaran->keys() !!},
        datasets: [
            {
                label: 'Total Pemasukan per Bulan',
                data: {!! collect($dataPerBulan)->pluck('total_pemasukan') !!},
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            },
            {
                label: 'Total Pengeluaran per Bulan',
                data: {!! $monthlyDataPengeluaran->values() !!},
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }
        ]
    },
    options: {
        scales: {
            y: {
                beginAtZero: true
            }
        },
        plugins: {
            zoom: {
                pan: {
                    enabled: true,
                    mode: 'x',
                },
                zoom: {
                    enabled: true,
                    mode: 'x',
                }
            }
        }
    }
});
 </script>
 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Perbulan</title>
    <link rel="icon" type="image/png" href="gambar/logoku.png">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <!-- <script src="{{ asset('js/custom.js') }}" defer></script> -->
</head>
@extends('layouts.master')
@section('content')
<body>
    <div class="kuasa">
    <div style="width:98%; height:500px;">
    <canvas id="mychart"></canvas>
</div>
<table>
    <thead>
        <tr>
            <th>Bulan</th>
            <th>Total Pemasukan</th>
            <th>Total Pengeluaran</th>
        </tr>
    </thead>
    <tbody>
    @if (!empty($dataPerBulan))
    @foreach($dataPerBulan as $data)
            <tr>
                <td>{{ $data['bulan'] }}</td>
                <td>{{ $data['total_pemasukan'] ?? 0 }}</td>
                <td>{{ $data['total_pengeluaran'] ?? 0 }}</td>
            </tr>
        @endforeach
        @else
            <tr>
            <td colspan="3" class="text-center">Data Masih Kosong</td>
            </tr>
            @endif
    </tbody>
</table>
</div>
</body>
<style>
    .kuasa {
        width: 60rem;
        margin: 3rem 1rem;
    }
    canvas {
                    background-color: #ffff;
                    border-radius: 8px;
                    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
                    max-width: 100%;
                    margin-top: 1rem;
                    width: 700rem;
                    height: auto;
                }
    table {
        font-family: Arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
        margin-top: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
    }

    th, td {
        border: 1px solid #dddddd;
        text-align: center;
        padding: 8px;
    }

    th {
        background-color: aqua;
        color: black;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #e0e0e0;
    }
    @media only screen and (max-width: 600px) {
            .kuasa {
                width: 27rem;
                margin: 3rem -15.5rem;
            }
            canvas {
                width: 100%;
                /* margin: 3rem -8rem; */
            }
            table {
                margin-top: -16rem;
            }
        }
</style>
<script>
    // Mendapatkan referensi ke elemen tbody
    var tableData = document.querySelector('table tbody');

    // Inisialisasi array untuk menyimpan data
    var labels = [];
    var totalPemasukan = [];
    var totalPengeluaran = [];

    // Iterasi melalui setiap baris dalam tbody
    tableData.querySelectorAll('tr').forEach(function (row) {
        labels.push(row.cells[0].innerText); // Mengambil data bulan
        totalPemasukan.push(parseFloat(row.cells[1].innerText)); // Mengambil data total pemasukan
        totalPengeluaran.push(parseFloat(row.cells[2].innerText)); // Mengambil data total pengeluaran
    });

    // Menggambar grafik menggunakan data yang diambil
    var ctx = document.getElementById('mychart').getContext('2d');

    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Total Pemasukan per Bulan',
                    data: totalPemasukan,
                    backgroundColor: '#2c3e50',
                    borderColor: 'black',
                    borderWidth: 1
                },
                {
                    label: 'Total Pengeluaran per Bulan',
                    data: totalPengeluaran,
                    backgroundColor: 'rgba(255, 0, 0, 0.6)',
                    borderColor: 'red',
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'x',
                    },
                    zoom: {
                        enabled: true,
                        mode: 'x',
                    }
                }
            }
        }
    });
</script>

</html>
@endsection


//di bawah ini adalah codingan file bulan
<?php
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

// Ambil data pengeluaran
$pengeluaranData = DB::table('pengeluarans')
    ->selectRaw('MONTH(tanggal) as bulan, SUM(jumlah) as total_pengeluaran')
    ->groupBy('bulan');

// Ambil data pemasukan
$pemasukanData = DB::table('pemasukans')
    ->selectRaw('MONTH(tanggal) as bulan, SUM(jumlah) as total_pemasukan')
    ->groupBy('bulan');

// Ambil data bulanan untuk pengeluaran
$monthlyDataPengeluaran = $pengeluaranData->get();

// Ambil data bulanan untuk pemasukan
$monthlyDataPemasukan = $pemasukanData->get();
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Data Perbulan</title>
    <link rel="icon" type="image/png" href="gambar/logoku.png">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
    <!-- <script src="{{ asset('js/custom.js') }}" defer></script> -->
</head>
@extends('layouts.master')
@section('content')
<body>
    <div class="kuasa">
    <div style="width:98%; height:500px;">
    <canvas id="mychart"></canvas>
</div>
<table>
    <thead>
        <tr>
            <th>Bulan</th>
            <th>Total Pemasukan</th>
            <th>Total Pengeluaran</th>
        </tr>
    </thead>
    <tbody>
    @if (!empty($dataPerBulan))
    @foreach($dataPerBulan as $data)
            <tr>
                <td>{{ $data['bulan'] }}</td>
                <td>{{ $data['total_pemasukan'] ?? 0 }}</td>
                <td>{{ $data['total_pengeluaran'] ?? 0 }}</td>
            </tr>
        @endforeach
        @else
            <tr>
            <td colspan="3" class="text-center">Data Masih Kosong</td>
            </tr>
            @endif
    </tbody>
</table>
</div>
</body>
<style>
    .kuasa {
        width: 60rem;
        margin: 3rem 1rem;
    }
    canvas {
                    background-color: #ffff;
                    border-radius: 8px;
                    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
                    max-width: 100%;
                    margin-top: 1rem;
                    width: 700rem;
                    height: auto;
                }
    table {
        font-family: Arial, sans-serif;
        border-collapse: collapse;
        width: 100%;
        margin-top: 20px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
    }

    th, td {
        border: 1px solid #dddddd;
        text-align: center;
        padding: 8px;
    }

    th {
        background-color: aqua;
        color: black;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }

    tr:hover {
        background-color: #e0e0e0;
    }
    @media only screen and (max-width: 600px) {
            .kuasa {
                width: 27rem;
                margin: 3rem -15.5rem;
            }
            canvas {
                width: 100%;
                /* margin: 3rem -8rem; */
            }
            table {
                margin-top: -16rem;
            }
        }
</style>
<script>
    // Mendapatkan data dari server
    var labels = {!! json_encode($monthlyDataPemasukan->pluck('bulan')) !!};
    var totalPemasukan = {!! json_encode($monthlyDataPemasukan->pluck('total_pemasukan')) !!};
    var totalPengeluaran = {!! json_encode($monthlyDataPengeluaran->pluck('total_pengeluaran')) !!};

    // Menggambar grafik menggunakan data yang diambil
    var ctx = document.getElementById('mychart').getContext('2d');

    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [
                {
                    label: 'Total Pemasukan per Bulan',
                    data: totalPemasukan,
                    backgroundColor: '#2c3e50',
                    borderColor: 'black',
                    borderWidth: 1
                },
                {
                    label: 'Total Pengeluaran per Bulan',
                    data: totalPengeluaran,
                    backgroundColor: 'rgba(255, 0, 0, 0.6)',
                    borderColor: 'red',
                    borderWidth: 1
                }
            ]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            },
            plugins: {
                zoom: {
                    pan: {
                        enabled: true,
                        mode: 'x',
                    },
                    zoom: {
                        enabled: true,
                        mode: 'x',
                    }
                }
            }
        }
    });
</script>


</html>
@endsection
//sampai sini codingan file bulan


document.getElementById('searchForm').addEventListener('submit', function (event) {
            event.preventDefault();

            const query = document.querySelector('input[name="query"]').value;

            fetch(`/search-global?query=${query}`)
                .then(response => response.json())
                .then(data => {
                    displaySearchResults(data);
                });
        });

        function displaySearchResults(data) {
            searchResults.innerHTML = '';

            for (const [model, results] of Object.entries(data)) {
                const resultSection = document.createElement('div');
                resultSection.innerHTML = `<h3>${model}</h3>`;
                
                results.forEach(result => {
                    const resultItem = document.createElement('div');
                    resultItem.innerHTML = `<p>${result.nama}</p>`;
                    
                    resultItem.addEventListener('click', function () {
                        alert(`Anda memilih ${model} dengan nama ${result.nama}`);
                    });

                    resultSection.appendChild(resultItem);
                });

                searchResults.appendChild(resultSection);
            }
        }

        // codingan di halaman dashboard
        <!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard</title>
  <link rel="icon" href="gambar/logoku.png">
</head>
<body>
@extends('layouts.master')
@section('content')

<form id="searchForm">
            <input type="text" name="query" placeholder="Cari...">
            <button type="submit">Cari</button>
          </form>

        <!-- Hasil Pencarian -->
        <div id="searchResults"></div> 
          <div class="xv">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"><path fill="aqua" fill-opacity="1" d="M0,32L40,48C80,64,160,96,240,112C320,128,400,128,480,112C560,96,640,64,720,74.7C800,85,880,139,960,170.7C1040,203,1120,213,1200,224C1280,235,1360,245,1400,250.7L1440,256L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z"></path></svg>
         
        </div>
        <script>
        document.getElementById('searchForm').addEventListener('submit', function (event) {
    event.preventDefault();

    const query = document.querySelector('input[name="query"]').value;

    fetch(`/search-global?query=${query}`)
        .then(response => response.json())
        .then(data => {
            displaySearchResults(data);
        });
});

function displaySearchResults(data) {
    searchResults.innerHTML = '';

    // Membuat elemen tabel
    const table = document.createElement('table');
    table.border = '1'; // Menambah border untuk tabel (opsional)

    // Iterasi melalui hasil pencarian dan tambahkan ke tabel
    for (const [model, results] of Object.entries(data)) {
        results.forEach(result => {
            // Membuat elemen baris tabel
            const row = table.insertRow();

            // Menambahkan data ke dalam sel-sel tabel
            for (const key in result) {
                const cell = row.insertCell();
                cell.innerHTML = result[key];
            }

            // Tangani klik pada hasil pencarian
            row.addEventListener('click', function () {
                alert(`Anda memilih ${model} dengan nama ${result.nama}`);
            });
        });
    }

    // Menambahkan tabel ke dalam div dengan id 'searchResults'
    searchResults.appendChild(table);
}

    </script>
          <style>
            #searchForm{
              margin: 18rem 20rem ;
              width: 100%;
            }
            .xv {
              height: 100rem;
              width: 80rem;
              position: fixed;
              margin: 18rem -5rem ;
              z-index: -999;
            }
            @media only screen and (max-width: 600px) {
                .xv {
                  margin: 18rem -19rem ;
                }
           }
          </style>
           @endsection
      </body>
</html>

// codingan di controller hutang 
<?php

namespace App\Http\Controllers;

use App\Models\Hutang;
use Illuminate\Http\Request;

class HutangController extends Controller
{
    public function index()
    {
        $hutangs = Hutang::all();
        return view('hutang.index', compact('hutangs'));
    }

    public function create()
    {
        return view('hutang.create');
    }

    public function store(Request $request)
    {
        $request->validate([
            'nama' => 'required|string',
            'jumlah' => 'required|integer',
            'catatan' => 'required|string',
            'tgl_hutang' => 'required|date',
            'tgl_jthtempo' => 'required|date',
        ]);

        Hutang::create($request->all());

        return redirect()->route('hutang.index')
            ->with('success', 'Hutang berhasil ditambahkan');
    }

    public function show(Hutang $hutang)
    {
        return view('hutang.show', compact('hutang'));
    }

    public function edit(Hutang $hutang)
    {
        return view('hutang.edit', compact('hutang'));
    }

    public function update(Request $request, Hutang $hutang)
    {
        $request->validate([
            'nama' => 'required|string',
            'jumlah' => 'required|integer',
            'catatan' => 'required|string',
            'tgl_hutang' => 'required|date',
            'tgl_jthtempo' => 'required|date',
        ]);

        $hutang->update($request->all());

        return redirect()->route('hutang.index')
            ->with('success', 'Hutang berhasil diperbarui');
    }

    public function destroy(Hutang $hutang)
    {
        $hutang->delete();

        return redirect()->route('hutang.index')
            ->with('success', 'Hutang berhasil dihapus');
    }

}         

<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320"><path fill="aqua" fill-opacity="1" d="M0,32L40,48C80,64,160,96,240,112C320,128,400,128,480,112C560,96,640,64,720,74.7C800,85,880,139,960,170.7C1040,203,1120,213,1200,224C1280,235,1360,245,1400,250.7L1440,256L1440,320L1400,320C1360,320,1280,320,1200,320C1120,320,1040,320,960,320C880,320,800,320,720,320C640,320,560,320,480,320C400,320,320,320,240,320C160,320,80,320,40,320L0,320Z"></path></svg>
@media only screen and (max-width: 600px) {
              svg {
                right: -19rem;
              }
              .pencar {
                margin: 7rem -13rem;
            }
              #searchForm {
                display: flex;
                width: 10rem;
                text-align: center;
              }
              /* table {
                width: 10rem;
                right: 0;
                left: 0;
                margin: ;
            } */
           

              /* #searchForm input[type="text"] {
                  width: 100%;
                  margin-bottom: 10px;
                  border-radius: 5px;
              } */
                      }

                      //script pencarian
                       <script>
        document.getElementById('searchForm').addEventListener('submit', function (event) {
    event.preventDefault();

    const query = document.querySelector('input[name="query"]').value;

    fetch(`/search-global?query=${query}`)
        .then(response => response.json())
        .then(data => {
            displaySearchResults(data);
        });
      });

function displaySearchResults(data) {
    searchResults.innerHTML = '';

    // Membuat elemen tabel
    const table = document.createElement('table');
    table.border = '1'; // Menambah border untuk tabel (opsional)

    // Iterasi melalui hasil pencarian dan tambahkan ke tabel
    for (const [model, results] of Object.entries(data)) {
        results.forEach(result => {
            // Membuat elemen baris tabel
            const row = table.insertRow();

            // Menambahkan data ke dalam sel-sel tabel
            for (const key in result) {
                // Memeriksa apakah key bukan created_at dan updated_at
                if (key !== 'created_at' && key !== 'updated_at') {
                    const cell = row.insertCell();
                    cell.innerHTML = result[key];
                }
            }

            // Tangani klik pada hasil pencarian
            row.addEventListener('click', function () {
                
            });
        });
    }

    // Menambahkan tabel ke dalam div dengan id 'searchResults'
    searchResults.appendChild(table);
}

    </script>
    <script src="https://apis.google.com/js/platform.js" async defer></script>
    <!-- Set your own client ID -->
    <meta name="google-signin-client_id" content="YOUR_CLIENT_ID">
    <script>
        window.fbAsyncInit = function() {
            FB.init({
                appId      : 'your-app-id',
                cookie     : true,
                xfbml      : true,
                version    : 'v12.0'
            });

            FB.AppEvents.logPageView();
        };

        (function(d, s, id){
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) {return;}
            js = d.createElement(s); js.id = id;
            js.src = "https://connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
        }(document, 'script', 'facebook-jssdk'));
    </script>
    // Callback function when sign-in is successful
        function onSignIn(googleUser) {
            // Get user details
            var profile = googleUser.getBasicProfile();
            console.log('ID: ' + profile.getId()); // Do something with the user ID
            console.log('Name: ' + profile.getName()); // Do something with the user's name
            console.log('Email: ' + profile.getEmail()); // Do something with the user's email

            // You can send the user data to your server for authentication or further processing
            // Example: Send the ID token to your server
            var id_token = googleUser.getAuthResponse().id_token;
            console.log('ID Token: ' + id_token);
            
            // Now you can handle the user authentication on your server
            // Send the 'id_token' to your server using AJAX or another method
        }

        //login dengan facebook

         function checkLoginState() {
            FB.getLoginStatus(function(response) {
                statusChangeCallback(response);
            });
        }

        function statusChangeCallback(response) {
            if (response.status === 'connected') {
                // User is logged into Facebook and your app.
                console.log('Logged in with Facebook!');
                console.log(response.authResponse.accessToken);

                // Add your logic for handling the logged-in user here
            } else {
                // User is not logged into Facebook or your app.
                console.log('Not logged in with Facebook!');
            }
        }
        <!-- <script type="module">
    function signInWithGoogle() {
  const provider = new GoogleAuthProvider();
  signInWithPopup(auth, provider)
    .then((result) => {
      const user = result.user;
      console.log(user);
      // Handle user data, e.g., send it to your Laravel backend
    })
    .catch((error) => {
      console.error(error);
    });
}

function signInWithFacebook() {
  const provider = new FacebookAuthProvider();
  signInWithPopup(auth, provider)
    .then((result) => {
      const user = result.user;
      console.log(user);
      // Handle user data, e.g., send it to your Laravel backend
    })
    .catch((error) => {
      console.error(error);
    });
}

    </script> -->

    <th colspan="3" style="text-align: center;">
    @php
        $namaHari = $totals[$tanggal]['hari'];
        switch ($namaHari) {
            case 'Monday':
                echo 'Senin';
                break;
            case 'Tuesday':
                echo 'Selasa';
                break;
            case 'Wednesday':
                echo 'Rabu';
                break;
            case 'Thursday':
                echo 'Kamis';
                break;
            case 'Friday':
                echo 'Jum\'at';
                break;
            case 'Saturday':
                echo 'Sabtu';
                break;
            case 'Sunday':
                echo 'Minggu';
                break;
            default:
                echo $namaHari; // Jika tidak cocok, tampilkan nilai aslinya
        }
    @endphp
    {{ $tanggal }}
</th>